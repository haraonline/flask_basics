    now that we have created a table, lets get started with performing CRUD operations on it...
    as discussed before CRUD - stands for create-read-update-and-deletion data from a database…
    in this lesson we will work with the python console, but when we learn about flask-forms, we can do ths same CRUD operations using
    forms instead of using the commandline...lets me switch to python console, and then we need to import the db instance first
    in-order to work with the database, this is same database instance that we've created at the starting before creating the publication table [anim]
    and then we also need to import our publication table because we are going to insert data into it...

    right, i hope you remember that the way we can access any class in python is to create instances of it..so to use our Publication class
    we first need to create an instance...so lets say...

>>> pub = Publication[this is the name of our class], and our Publication table has two fields, publisher_id and publisher_name...
    so we need to pass two values for the publication class...the value for the first one is lets say (100, ‘and some random name for the publisher...
    'Oxford Publications’) right, so, we now have an instance...

>>> pub
    when we type pub in the console, we can see the details of the instance object, exactly in the format that we defined in the __repr__, [show __repr__]
    this is why repr is used and you can of-course customize it as you like...

    since the instance pub belongs to the class Publication, this should now have access to all the properties and methods of the class it belongs to..
    so our Publication class has two properties or attributes id and name, to access these attributes, we can use the instance.attribute notation:
    >>> pub.id give the value for the id and so is the case with
    >>> pub.name....

    if we were to have any functions or methods in the class, we can access 'em as well using the same notation....

--------------------------------------------------------------------------

    if you remember we can check what properties or methods a class or instances has using the python's dir function...
>>> dir(pub)
    we see a lot of inbuilt properties here, we are of-course interested in those we created....so here we find the two attributes we created,
    the id and name

>>> type(pub)
    similarly we can do a type on the instance pub...so this says that the object is of type class, and belongs to the module or file run.py
    and the name of the class is Publication...

    ok, now that we understand class and instances better, lets insert this data into our database...
    inserting data is a 3 step process, first we create an instance of the class, the way we just did, second we add the instance to the
    database session....    and we do that by calling the session method on the database instance db...

>>> db.session.add(pub) and then we pass the pub instance..and can we persist the data by calling the commit method....
>>> db.session.commit() # save all the additions and changes to the database

    another thing i'd like to tell you is that...every-time you see an object, instance or a class..... its a good idea to get into the habit of
    using the inbuilt dir and type functions, that way you will understand which properties and methods are available, and there may some
    interesting properties that could be very useful in the projects you do...

    >>> so if we do dir(db) on our database instances - you can see a whole lot of attributes here...
    the session object that we used here is one of them......so here is it...and then...

>>> dir(db.session)
    here we can see the add and commit methods that we just used...

    so lets create a couple of more instances so that you will understand these better...
    paramount = our class is Publication(102, 'Paramount Press')
    oracle = Publication(103, 'Oracle Books Inc')
    this time lets use the add_all method since we have more than one instance to add

    db.session.add_all([oxford, oracle]) # be sure to remember, add_all takes a python list as argument, other data-types are not allowed...
    then finally we call the commit method...db.session.commit(), and this will save all the additions and changes to our postgresql database...

    ...the session object of the db instance is like a temporary space or memory in which uncommitted transactions exist...its like a staging zone...
    once you exit the session or close the program, the data will be gone, unless you save the data by committing it to the database

    now lets go to our PGAdmin3 and see if the data we added exists....[slow down here when reading the path] under postgresql, databases, catalog_db, schemas, public and there we see
    our table and the records that we just inserted....

    ok so that's about creating data and the first part of CRUD operations...in the next lesson we'll see how to query the data from a the database
    see you then...

--------------------------------------------------------------------------
QUERYING DATA
>>> r = Publication.query.all() # returns a list of all records in the db
>>> r
[The id is 100, Name is Pinnacle Publishers, The id is 101, Name is Oxford Press, The id is 103, Name is Nautica Books]
--------------------------------------------------------------------------

FILTERING DATA 1 (filter_by method)
>>> x = Publication.query.filter_by(id=101).first()
>>> xc
The id is 101, Name is Oxford Press
>>> x.id
101
>>> x.name
'Oxford Press'
--------------------------------------------------------------------------

FILTERING DATA 2 (filter method)
>>> f = Publication.query.filter(Publication.id==103).first()
>>> f
The id is 103, Name is Nautica Books
--------------------------------------------------------------------------

ORDERING RECORDS
>>> o = Publication.query.order_by(Publication.id).all()
>>> o
[The id is 100, Name is Pinnacle Publishers, The id is 101, Name is Oxford Press, The id is 103, Name is Nautica Books]
--------------------------------------------------------------------------

LIMITING NUMBER OF RECORDS
>>> l = Publication.query.limit(1).all()
>>> l
[The id is 100, Name is Pinnacle Publishers]
--------------------------------------------------------------------------

QUERY DATA USING PRIMARY-KEY
>>> l = Publication.query.get(101)
>>> l
The id is 101, Name is Oxford Press
--------------------------------------------------------------------------

UPDATING RECORDS [ updating & deleting involves querying the data first]
>>> x = Publication.query.first()
>>> x
The id is 100, Name is Pinnacle Publishers
>>> x.id
100
>>> x.id = 108
>>> db.session.commit()
>>> x
The id is 108, Name is Pinnacle Publishers
--------------------------------------------------------------------------

DELETING RECORDS [query the data you wish to delete first]
>>> d = Publication.query.filter_by(id=103).first()
>>> d
The id is 103, Name is Nautica Books
>>> db.session.delete(d)
>>> db.session.commit()

--------------------------------------------------------------------------

http://flask-sqlalchemy.pocoo.org/2.1/queries/

---------------
LAZY
This keyword is about how to load your DB Models into the memory, especially in the case of a one to many relationship.
By default sqlalchemy will load all child elements in a list when you first access/request the parent element.
The best use of lazy keyword, is to set it to 'dynamic', that way it'll load child elements only when you want to access them.

BACKREF
When you define a relationship in the parent model, you add the "backref" keyword only if you want to access a parent element from a requested child element.

